<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minhas Notas</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        .modal {
            transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
        }
        .modal.hidden {
            opacity: 0;
            visibility: hidden;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4 sm:p-6 lg:p-8">

    <!-- Container Principal do App -->
    <div class="bg-white p-6 sm:p-8 lg:p-10 rounded-3xl shadow-2xl w-full max-w-4xl flex flex-col items-center">

        <!-- Logo e Título -->
        <h1 class="text-3xl sm:text-4xl font-bold text-gray-800 mb-6">
            <span class="text-sky-500">Minhas</span> Notas
        </h1>

        <!-- Mensagem de Erro/Sucesso -->
        <div id="message-container" class="w-full text-center text-sm font-medium mb-4"></div>
        
        <!-- Formulário de Autenticação -->
        <div id="auth-form-container" class="w-full transition-opacity duration-300">
            <h2 id="auth-title" class="text-xl font-semibold text-gray-700 text-center mb-6">Faça login</h2>
            <form id="auth-form" class="space-y-4">
                <div id="name-input-div" class="hidden">
                    <input id="name-input" type="text" placeholder="Nome Completo" class="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:outline-none transition-all">
                </div>
                <div>
                    <input id="email-input" type="email" placeholder="E-mail" required class="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:outline-none transition-all">
                </div>
                <div>
                    <input id="password-input" type="password" placeholder="Senha" required class="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:outline-none transition-all">
                </div>
                <div id="confirm-password-div" class="hidden">
                    <input id="confirm-password-input" type="password" placeholder="Confirme a senha" class="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:outline-none transition-all">
                </div>
                <button type="submit" id="auth-button" class="w-full bg-sky-500 text-white font-bold py-3 rounded-xl hover:bg-sky-600 transition-all shadow-lg transform active:scale-95">
                    Login
                </button>
            </form>
            <p class="text-center text-sm text-gray-500 mt-4">
                Não tem uma conta? 
                <a href="#" id="toggle-auth-link" class="text-sky-500 hover:text-sky-600 font-medium">Cadastre-se</a>
            </p>
            <p id="forgot-password-link" class="text-center text-sm text-gray-500 mt-2 hover:text-sky-500 cursor-pointer transition-colors duration-200">
                Esqueceu sua senha?
            </p>
        </div>

        <!-- Interface do Aplicativo de Notas -->
        <div id="notes-app-container" class="hidden w-full transition-opacity duration-300">
            <div class="flex justify-between items-center w-full mb-6">
                <div class="flex items-center space-x-4">
                    <label for="avatar-upload" class="cursor-pointer relative">
                        <img id="user-avatar" class="h-12 w-12 rounded-full border-2 border-sky-500 object-cover" src="https://placehold.co/100x100/A0A0A0/ffffff?text=User" alt="Foto de Perfil">
                        <div id="avatar-upload-spinner" class="absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 rounded-full hidden">
                            <svg class="animate-spin h-5 w-5 text-sky-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </div>
                    </label>
                    <input type="file" id="avatar-upload" accept="image/*" class="hidden">
                    <div class="flex flex-col">
                        <span id="user-name" class="font-bold text-lg text-gray-800"></span>
                        <span id="user-email" class="font-medium text-gray-600 truncate text-sm max-w-xs"></span>
                    </div>
                </div>
                <button id="logout-button" class="text-gray-400 hover:text-gray-600 transform hover:scale-110 transition-transform">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                    </svg>
                </button>
            </div>

            <!-- Formulário para Adicionar Notas -->
            <form id="add-note-form" class="space-y-4 mb-8 w-full">
                <input id="note-title-input" type="text" placeholder="Título da nota" required class="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:outline-none transition-all">
                <textarea id="note-content-input" placeholder="Escreva sua nota aqui..." required rows="5" class="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:outline-none transition-all"></textarea>
                <button type="submit" class="w-full bg-sky-500 text-white font-bold py-3 rounded-xl hover:bg-sky-600 transition-all shadow-lg transform active:scale-95">
                    Adicionar Nota
                </button>
            </form>

            <!-- Lista de Notas -->
            <div id="notes-list" class="w-full grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
                <!-- Notas serão renderizadas aqui -->
            </div>
        </div>

    </div>

    <!-- Modal para Recuperação de Senha -->
    <div id="forgot-password-modal" class="modal fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white p-6 rounded-2xl shadow-xl w-full max-w-md relative">
            <button id="close-modal-button" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h3 class="text-xl font-semibold text-gray-700 text-center mb-6">Recuperar Senha</h3>
            <div id="modal-message-container" class="w-full text-center text-sm font-medium mb-4"></div>
            <p class="text-sm text-gray-500 mb-4 text-center">
                Insira seu e-mail para receber um link de redefinição de senha.
            </p>
            <input id="forgot-password-email-input" type="email" placeholder="Seu e-mail" required class="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:outline-none transition-all">
            <button id="send-reset-link-button" class="w-full bg-sky-500 text-white font-bold py-3 rounded-xl hover:bg-sky-600 transition-all shadow-lg transform active:scale-95 mt-4">
                Enviar Link
            </button>
        </div>
    </div>

    <script>
        // Supabase URL e API Key fornecidos pelo usuário
        const supabaseUrl = 'https://dnrvxzcdzvdexawijfcm.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRucnZ4emNkenZkZXhhd2lqZmNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY4MjU1MTIsImV4cCI6MjA3MjQwMTUxMn0.YgjULrTvX44pud2JRGRtLd1aq_TdVabDvhTegREiA9E';

        const { createClient } = window.supabase;
        const supabase = createClient(supabaseUrl, supabaseAnonKey);

        // Elementos do DOM
        const authFormContainer = document.getElementById('auth-form-container');
        const notesAppContainer = document.getElementById('notes-app-container');
        const authForm = document.getElementById('auth-form');
        const authTitle = document.getElementById('auth-title');
        const authButton = document.getElementById('auth-button');
        const toggleAuthLink = document.getElementById('toggle-auth-link');
        const forgotPasswordLink = document.getElementById('forgot-password-link');
        const nameInputDiv = document.getElementById('name-input-div');
        const nameInput = document.getElementById('name-input');
        const emailInput = document.getElementById('email-input');
        const passwordInput = document.getElementById('password-input');
        const confirmPasswordDiv = document.getElementById('confirm-password-div');
        const messageContainer = document.getElementById('message-container');
        const userEmailSpan = document.getElementById('user-email');
        const userNameSpan = document.getElementById('user-name');
        const userAvatar = document.getElementById('user-avatar');
        const avatarUploadInput = document.getElementById('avatar-upload');
        const avatarUploadSpinner = document.getElementById('avatar-upload-spinner');
        const logoutButton = document.getElementById('logout-button');
        const addNoteForm = document.getElementById('add-note-form');
        const noteTitleInput = document.getElementById('note-title-input');
        const noteContentInput = document.getElementById('note-content-input');
        const notesList = document.getElementById('notes-list');

        // Modal de recuperação de senha
        const forgotPasswordModal = document.getElementById('forgot-password-modal');
        const closePasswordModalButton = document.getElementById('close-modal-button');
        const forgotPasswordEmailInput = document.getElementById('forgot-password-email-input');
        const sendResetLinkButton = document.getElementById('send-reset-link-button');
        const modalMessageContainer = document.getElementById('modal-message-container');

        let isLogin = true;

        // Função para mostrar mensagem de status
        function showMessage(message, isError = false, targetContainer = messageContainer) {
            targetContainer.textContent = message;
            if (isError) {
                targetContainer.className = 'w-full text-center text-sm font-medium mb-4 text-red-500';
            } else {
                targetContainer.className = 'w-full text-center text-sm font-medium mb-4 text-green-500';
            }
        }

        // Função para alternar entre login e cadastro
        toggleAuthLink.addEventListener('click', (e) => {
            e.preventDefault();
            isLogin = !isLogin;
            if (isLogin) {
                authTitle.textContent = 'Faça login';
                authButton.textContent = 'Login';
                nameInputDiv.classList.add('hidden');
                confirmPasswordDiv.classList.add('hidden');
                toggleAuthLink.textContent = 'Cadastre-se';
                forgotPasswordLink.classList.remove('hidden');
                showMessage('');
            } else {
                authTitle.textContent = 'Crie sua conta';
                authButton.textContent = 'Cadastrar';
                nameInputDiv.classList.remove('hidden');
                confirmPasswordDiv.classList.remove('hidden');
                toggleAuthLink.textContent = 'Faça login';
                forgotPasswordLink.classList.add('hidden');
                showMessage('');
            }
        });
        
        // Lógica para abrir o modal de recuperação de senha
        forgotPasswordLink.addEventListener('click', () => {
            forgotPasswordModal.classList.remove('hidden');
        });

        // Lógica para fechar o modal
        closePasswordModalButton.addEventListener('click', () => {
            forgotPasswordModal.classList.add('hidden');
            modalMessageContainer.textContent = '';
            forgotPasswordEmailInput.value = '';
        });

        // Lógica de recuperação de senha via modal
        sendResetLinkButton.addEventListener('click', async () => {
            const email = forgotPasswordEmailInput.value;
            if (!email) {
                showMessage('Por favor, insira seu e-mail para redefinir a senha.', true, modalMessageContainer);
                return;
            }

            try {
                // A URL para a qual o usuário será redirecionado após o clique no link do e-mail
                // A URL para a qual o usuário será redirecionado após o clique no link do e-mail
                const { error } = await supabase.auth.resetPasswordForEmail(email, {
                    redirectTo: 'https://armandodecampos.github.io/Notas/'
                });
                
                if (error) throw error;
                showMessage('Verifique seu e-mail para o link de redefinição de senha.', false, modalMessageContainer);
            } catch (error) {
                showMessage('Erro: ' + error.message, true, modalMessageContainer);
            }
        });

        // Lógica de autenticação (login e cadastro)
        authForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = emailInput.value;
            const password = passwordInput.value;

            try {
                if (isLogin) {
                    // Lógica de login
                    const { error } = await supabase.auth.signInWithPassword({ email, password });
                    if (error) throw error;
                    showMessage('Login realizado com sucesso!');
                } else {
                    // Lógica de cadastro
                    const name = nameInput.value;
                    const confirmPassword = document.getElementById('confirm-password-input').value;
                    if (password !== confirmPassword) {
                        throw new Error('As senhas não coincidem!');
                    }
                    const { error } = await supabase.auth.signUp({
                        email,
                        password,
                        options: {
                            data: { full_name: name }
                        }
                    });
                    if (error) throw error;
                    showMessage('Cadastro realizado com sucesso! Verifique seu e-mail para confirmar.');
                }
            } catch (error) {
                showMessage(error.message, true);
            }
        });

        // Lógica de logout
        logoutButton.addEventListener('click', async () => {
            try {
                const { error } = await supabase.auth.signOut();
                if (error) throw error;
                showMessage('Você saiu da sua conta.');
            } catch (error) {
                showMessage(error.message, true);
            }
        });

        // Lógica para adicionar uma nova nota
        addNoteForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const title = noteTitleInput.value;
            const content = noteContentInput.value;
            const user = (await supabase.auth.getUser()).data.user;
            if (!user) {
                showMessage('Você precisa estar logado para adicionar notas.', true);
                return;
            }

            try {
                const { error } = await supabase.from('notes').insert([{ title, content, user_id: user.id }]);
                if (error) throw error;
                // Força o recarregamento completo da página
                window.location.reload();
            } catch (error) {
                showMessage('Erro ao adicionar nota: ' + error.message, true);
            }
        });

        // Lógica para renderizar as notas
        function renderNotes(notes) {
            notesList.innerHTML = '';
            if (notes.length === 0) {
                notesList.innerHTML = `<p class="col-span-3 text-center text-gray-500">Nenhuma nota encontrada. Crie uma nova!</p>`;
                return;
            }
            notes.forEach(note => {
                const noteCard = document.createElement('div');
                noteCard.className = 'bg-sky-50 border border-sky-200 p-6 rounded-2xl shadow-md transform hover:scale-105 transition-transform duration-200 cursor-pointer flex flex-col justify-between';
                noteCard.dataset.id = note.id;
                noteCard.innerHTML = `
                    <div>
                        <h3 class="font-bold text-lg text-gray-800 mb-2">${note.title}</h3>
                        <p class="text-sm text-gray-600">${note.content}</p>
                    </div>
                    <div class="flex justify-end mt-4 space-x-2">
                        <button class="delete-note text-red-500 hover:text-red-700 transition-colors transform hover:scale-110" data-id="${note.id}">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                `;
                notesList.appendChild(noteCard);
            });
        }

        // Lógica para excluir uma nota
        notesList.addEventListener('click', async (e) => {
            if (e.target.closest('.delete-note')) {
                const noteId = e.target.closest('.delete-note').dataset.id;
                try {
                    const { error } = await supabase.from('notes').delete().eq('id', noteId);
                    if (error) throw error;
                    // Força o recarregamento completo da página
                    window.location.reload();
                } catch (error) {
                    showMessage('Erro ao excluir nota: ' + error.message, true);
                }
            }
        });

        // Lógica para upload de avatar
        avatarUploadInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (!file) {
                return;
            }

            const user = (await supabase.auth.getUser()).data.user;
            if (!user) {
                showMessage('Você precisa estar logado para fazer o upload da foto.', true);
                return;
            }

            avatarUploadSpinner.classList.remove('hidden');

            const fileExt = file.name.split('.').pop();
            const filePath = `${user.id}.${fileExt}`;

            try {
                // Upload do arquivo para o Supabase Storage
                const { error: uploadError } = await supabase.storage
                    .from('avatars')
                    .upload(filePath, file, {
                        cacheControl: '3600',
                        upsert: true
                    });

                if (uploadError) throw uploadError;

                // Obter a URL pública do arquivo
                const { data: publicUrlData } = supabase.storage
                    .from('avatars')
                    .getPublicUrl(filePath);

                // Atualizar o perfil do usuário com a nova URL
                const { error: updateError } = await supabase.auth.updateUser({
                    data: { avatar_url: publicUrlData.publicUrl }
                });

                if (updateError) throw updateError;

                showMessage('Foto de perfil atualizada com sucesso!');
                userAvatar.src = publicUrlData.publicUrl;

            } catch (error) {
                showMessage('Erro ao fazer upload da foto: ' + error.message, true);
            } finally {
                avatarUploadSpinner.classList.add('hidden');
            }
        });

        // Monitorar o estado de autenticação do usuário
        supabase.auth.onAuthStateChange(async (event, session) => {
            const user = session?.user;
            if (user) {
                // Usuário logado
                authFormContainer.classList.add('hidden');
                notesAppContainer.classList.remove('hidden');
                userNameSpan.textContent = user.user_metadata.full_name || 'Usuário';
                userEmailSpan.textContent = user.email;
                userAvatar.src = user.user_metadata.avatar_url || 'https://placehold.co/100x100/A0A0A0/ffffff?text=User';
                showMessage('');
                fetchNotes();
            } else {
                // Usuário deslogado
                authFormContainer.classList.remove('hidden');
                notesAppContainer.classList.add('hidden');
                userEmailSpan.textContent = '';
                userNameSpan.textContent = '';
                userAvatar.src = 'https://placehold.co/100x100/A0A0A0/ffffff?text=User';
                notesList.innerHTML = '';
            }
        });
        
        // Função para buscar as notas do usuário
        async function fetchNotes() {
            try {
                const user = (await supabase.auth.getUser()).data.user;
                if (!user) return;
                const { data: notes, error } = await supabase
                    .from('notes')
                    .select('*')
                    .eq('user_id', user.id)
                    .order('created_at', { ascending: false });
                if (error) throw error;
                renderNotes(notes);
            } catch (error) {
                showMessage('Erro ao carregar notas: ' + error.message, true);
            }
        }
    </script>
</body>
</html>
